let cc = load[<id: @vec {int -> int}, movie_id: @vec {int -> int}, subject_id: @vec {int -> int}, status_id: @vec {int -> int}, size: int>]("datasets/job/complete_cast.csv")
let cct1 = load[<id: @vec {int -> int}, kind: @vec {int -> string}, size: int>]("datasets/job/26c/cct1.csv")
let cct2 = load[<id: @vec {int -> int}, kind: @vec {int -> string}, size: int>]("datasets/job/26c/cct2.csv")
let mi_idx = load[<id: @vec {int -> int}, movie_id: @vec {int -> int}, info_type_id: @vec {int -> int}, info: @vec {int -> string}, note: @vec {int -> string}, size: int>]("datasets/job/movie_info_idx.csv")
let it2 = load[<id: @vec {int -> int}, info: @vec {int -> string}, size: int>]("datasets/job/26c/it2.csv")
let t = load[<id: @vec {int -> int}, title: @vec {int -> string}, imdb_index: @vec {int -> string}, kind_id: @vec {int -> int}, production_year: @vec {int -> int}, imdb_id: @vec {int -> string}, phonetic_code: @vec {int -> string}, episode_of_id: @vec {int -> int}, season_nr: @vec {int -> int}, episode_nr: @vec {int -> int}, series_years: @vec {int -> string}, md5sum: @vec {int -> string}, size: int>]("datasets/job/26c/t.csv")
let kt = load[<id: @vec {int -> int}, kind: @vec {int -> string}, size: int>]("datasets/job/26c/kt.csv")
let mk = load[<id: @vec {int -> int}, movie_id: @vec {int -> int}, keyword_id: @vec {int -> int}, size: int>]("datasets/job/movie_keyword.csv")
let k = load[<id: @vec {int -> int}, keyword: @vec {int -> string}, phonetic_code: @vec {int -> string}, size: int>]("datasets/job/26c/k.csv")
let ci = load[<id: @vec {int -> int}, person_id: @vec {int -> int}, movie_id: @vec {int -> int}, person_role_id: @vec {int -> int}, note: @vec {int -> string}, nr_order: @vec {int -> int}, role_id: @vec {int -> int}, size: int>]("datasets/job/cast_info.csv")
let n = load[<id: @vec {int -> int}, name: @vec {int -> string}, imdb_index: @vec {int -> string}, imdb_id: @vec {int -> string}, gender: @vec {int -> string}, name_pcode_cf: @vec {int -> string}, name_pcode_nf: @vec {int -> string}, surname_pcode: @vec {int -> string}, md5sum: @vec {int -> string}, size: int>]("datasets/job/name.csv")
let chn = load[<id: @vec {int -> int}, name: @vec {int -> string}, imdb_index: @vec {int -> string}, imdb_id: @vec {int -> int}, name_pcode_cf: @vec {int -> string}, surname_pcode: @vec {int -> string}, md5sum: @vec {int -> string}, size: int>]("datasets/job/26c/chn.csv")

let cct1_trie0 = sum(<i, _> <- range(cct1.size)) @phmap(cct1.size) { cct1.id(i) -> { i -> 1 } } in
let cct2_trie0 = sum(<i, _> <- range(cct2.size)) @phmap(cct2.size) { cct2.id(i) -> { i -> 1 } } in
let interm0_trie0 = sum(<cc_off, _> <- range(cc.size))
	let x0 = cc.subject_id(cc_off) in
	if (x0 ∈ cct1_trie0) then
		let cct1_trie1 = cct1_trie0(x0) in
		let x1 = cc.status_id(cc_off) in
		if (x1 ∈ cct2_trie0) then
			let cct2_trie1 = cct2_trie0(x1) in
			@phmap(promote[min_sum](1000000) + promote[min_sum](cc.size)) { cc.movie_id(cc_off) -> { <col0=cc.subject_id(cc_off), col1=cc.status_id(cc_off)> -> 1 } }
in

let it2_trie0 = sum(<i, _> <- range(it2.size)) @phmap(it2.size) { it2.id(i) -> { i -> 1 } } in
let interm1_trie0 = sum(<mi_idx_off, _> <- range(mi_idx.size))
	let x0 = mi_idx.info_type_id(mi_idx_off) in
	if (x0 ∈ it2_trie0) then
		let it2_trie1 = it2_trie0(x0) in
		let x1 = mi_idx.movie_id(mi_idx_off) in
		if (x1 ∈ interm0_trie0) then
			let interm0_trie1 = interm0_trie0(x1) in
			sum(<interm0_tuple, _> <- interm0_trie1)
				@phmap(promote[min_sum](1000000) + promote[min_sum](mi_idx.size)) { mi_idx.movie_id(mi_idx_off) -> { <col0=mi_idx.info_type_id(mi_idx_off), col2=mi_idx.info(mi_idx_off), col3=interm0_tuple.col0, col4=interm0_tuple.col1> -> 1 } }
in

let kt_trie0 = sum(<i, _> <- range(kt.size)) @phmap(kt.size) { kt.id(i) -> { i -> 1 } } in
let interm2_trie0 = sum(<t_off, _> <- range(t.size))
	let x0 = t.kind_id(t_off) in
	if (x0 ∈ kt_trie0) then
		let kt_trie1 = kt_trie0(x0) in
		let x1 = t.id(t_off) in
		if (x1 ∈ interm1_trie0) then
			let interm1_trie1 = interm1_trie0(x1) in
			sum(<interm1_tuple, _> <- interm1_trie1)
				@phmap(promote[min_sum](1000000) + promote[min_sum](t.size)) { t.id(t_off) -> { <col0=t.kind_id(t_off), col2=t.title(t_off), col3=interm1_tuple.col0, col4=interm1_tuple.col2, col5=interm1_tuple.col3, col6=interm1_tuple.col4> -> 1 } }
in

let k_trie0 = sum(<i, _> <- range(k.size)) @phmap(k.size) { k.id(i) -> { i -> 1 } } in
let interm3_trie0 = sum(<mk_off, _> <- range(mk.size))
	let x0 = mk.keyword_id(mk_off) in
	if (x0 ∈ k_trie0) then
		let k_trie1 = k_trie0(x0) in
		let x1 = mk.movie_id(mk_off) in
		if (x1 ∈ interm2_trie0) then
			let interm2_trie1 = interm2_trie0(x1) in
			sum(<interm2_tuple, _> <- interm2_trie1)
				@phmap(promote[min_sum](1000000) + promote[min_sum](mk.size)) { mk.movie_id(mk_off) -> { <col0=mk.keyword_id(mk_off), col2=interm2_tuple.col0, col3=interm2_tuple.col2, col4=interm2_tuple.col3, col5=interm2_tuple.col4, col6=interm2_tuple.col5, col7=interm2_tuple.col6> -> 1 } }
in

let chn_trie0 = sum(<i, _> <- range(chn.size)) @phmap(chn.size) { chn.id(i) -> { i -> 1 } } in
let n_trie0 = sum(<i, _> <- range(n.size)) @phmap(n.size) { n.id(i) -> { i -> 1 } } in
let interm4_trie0 = sum(<ci_off, _> <- range(ci.size))
	let x0 = ci.movie_id(ci_off) in
	if (x0 ∈ interm3_trie0) then
		let interm3_trie1 = interm3_trie0(x0) in
		let x1 = ci.person_role_id(ci_off) in
		if (x1 ∈ chn_trie0) then
			let chn_trie1 = chn_trie0(x1) in
			let x2 = ci.person_id(ci_off) in
			if (x2 ∈ n_trie0) then
				let n_trie1 = n_trie0(x2) in
				sum(<chn_off, _> <- chn_trie1)
					sum(<interm3_tuple, _> <- interm3_trie1)
						{ <col0=ci.person_id(ci_off), col1=ci.person_role_id(ci_off), col2=ci.movie_id(ci_off), col3=chn.name(chn_off), col4=interm3_tuple.col0, col5=interm3_tuple.col2, col6=interm3_tuple.col3, col7=interm3_tuple.col4, col8=interm3_tuple.col5, col9=interm3_tuple.col6, col10=interm3_tuple.col7> -> 1 }
in

sum(<interm4_tuple, _> <- interm4_trie0)
	promote[min_sum](<col0=interm4.col3, col1=interm4.col6, col2=interm4.col8>)

